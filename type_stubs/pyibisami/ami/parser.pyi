from _typeshed import Incomplete
from collections.abc import Generator
from pyibisami.ami.parameter import AMIParamError as AMIParamError, AMIParameter as AMIParameter
from traits.api import HasTraits

class AMIParamConfigurator(HasTraits):
    def __init__(self, ami_file_contents_str) -> None: ...
    def __call__(self) -> None: ...
    def open_gui(self) -> None: ...
    def default_traits_view(self): ...
    def fetch_param(self, branch_names): ...
    def fetch_param_val(self, branch_names): ...
    def set_param_val(self, branch_names, new_val) -> None: ...
    @property
    def ami_parsing_errors(self): ...
    @property
    def ami_param_defs(self): ...
    @property
    def input_ami_params(self): ...
    def input_ami_param(self, params, pname): ...
    @property
    def info_ami_params(self): ...

whitespace: Incomplete
comment: Incomplete
ignore: Incomplete

def lexeme(p): ...
def int2tap(x): ...

lparen: Incomplete
rparen: Incomplete
number: Incomplete
integ: Incomplete
nat: Incomplete
tap_ix: Incomplete
symbol: Incomplete
true: Incomplete
false: Incomplete
ami_string: Incomplete
atom: Incomplete
node_name: Incomplete

def node() -> Generator[Incomplete, Incomplete, Incomplete]: ...

expr: Incomplete
ami_defs: Incomplete

def proc_branch(branch): ...
def parse_ami_param_defs(param_str): ...
def make_gui_items(pname, param, first_call: bool = ...): ...
